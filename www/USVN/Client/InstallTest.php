<?php
// Call USVN_Client_InstallTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "USVN_Client_InstallTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'www/USVN/autoload.php';

/**
 * Test class for USVN_Client_Install.
 * Generated by PHPUnit_Util_Skeleton on 2007-03-10 at 18:08:36.
 */
class USVN_Client_InstallTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("USVN_Client_InstallTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    public function setUp()
    {
        $this->clean();
        USVN_Client_SVNUtils::createSvnDirectoryStruct("tests/tmp/testrepository");
        @mkdir('tests/tmp/fakerepository');
    }

    public function tearDown()
    {
        $this->clean();
    }

    private function clean()
    {
        USVN_DirectoryUtils::removeDirectory("tests/tmp/testrepository");
        USVN_DirectoryUtils::removeDirectory('tests/tmp/fakerepository');
    }

    public function test_notSvnRepository()
    {
        try
        {
            new USVN_Client_Install('tests/tmp/fakerepository', 'http://bidon', 'auth007');
        }
        catch (Exception $e)
        {
            return;
        }
        $this->fail();
    }

    public function test_installHook()
    {
        $install = new USVN_Client_Install('tests/tmp/testrepository', 'http://bidon', 'auth007');
        $this->assertTrue(file_exists('tests/tmp/testrepository/hooks/start-commit'));
        $this->assertTrue(file_exists('tests/tmp/testrepository/hooks/pre-commit'));
        if (!substr(php_uname(), 0, 7) == "Windows") {
            $this->assertTrue(is_executable('tests/tmp/testrepository/hooks/pre-commit'), "Hook is not executable");
        }
        $this->assertTrue(file_exists('tests/tmp/testrepository/usvn'));
        $this->assertTrue(file_exists('tests/tmp/testrepository/usvn/USVN/Client/Hooks/StartCommit.php'), "Source code of hooks class is not available.");
        $this->assertTrue(file_exists('tests/tmp/testrepository/usvn/USVN/Client/Config.php'), "Source code of some client class is not available.");
    }

    public function test_configFile()
    {
        $install = new USVN_Client_Install('tests/tmp/testrepository', 'http://bidon', 'auth007');
        $xml = simplexml_load_file('tests/tmp/testrepository/usvn/config.xml');
        $this->assertEquals('http://bidon', (string)$xml->url);
        $this->assertEquals('auth007', (string)$xml->auth);
    }
}

// Call USVN_Client_InstallTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "USVN_Client_InstallTest::main") {
    USVN_Client_InstallTest::main();
}
?>
