<?php
/**
 * Install usvn hooks.
 *
 * @author Team USVN <contact@usvn.info>
 * @link http://www.usvn.info
 * @license http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt CeCILL V2
 * @copyright Copyright 2007, Team USVN
 * @since 0.5
 * @package client
 * @subpackage install
 *
 * This software has been written at EPITECH <http://www.epitech.net>
 * EPITECH, European Institute of Technology, Paris - FRANCE -
 * This project has been realised as part of
 * end of studies project.
 *
 * $Id$
 */

// Call USVN_Client_InstallTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "USVN_Client_InstallTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'www/USVN/autoload.php';

/**
 * Test class for USVN_Client_Install.
 * Generated by PHPUnit_Util_Skeleton on 2007-03-10 at 18:08:36.
 */
class USVN_Client_InstallTest extends USVN_Client_CommandTest {
	/**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("USVN_Client_InstallTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    public function test_notSvnRepository()
    {
        try {
            new USVN_Client_Install('tests/tmp/fakerepository', 'http://example.com', 'project-love', 'auth007', $this->httpClient);
        }
        catch (Exception $e) {
            return;
        }
        $this->fail();
    }

    public function test_installHook()
    {
        $install = new USVN_Client_Install('tests/tmp/testrepository', 'http://example.com', 'project-love', 'auth007', $this->httpClient);
        $this->assertTrue(file_exists('tests/tmp/testrepository/hooks/start-commit'));
        $this->assertTrue(file_exists('tests/tmp/testrepository/hooks/pre-commit'));
        if (!(substr(php_uname(), 0, 7) == "Windows")) {
            $this->assertTrue(is_executable('tests/tmp/testrepository/hooks/pre-commit'), "Hook is not executable");
        }
        $this->assertTrue(file_exists('tests/tmp/testrepository/usvn'));
        $this->assertTrue(file_exists('tests/tmp/testrepository/usvn/USVN/Client/Hooks/StartCommit.php'), "Source code of hooks class is not available.");
        $this->assertTrue(file_exists('tests/tmp/testrepository/usvn/USVN/Client/Config.php'), "Source code of some client class is not available.");
        $this->assertTrue(file_exists('tests/tmp/testrepository/usvn/USVN/Exception.php'), "Source code of some client class is not available.");
    }

    public function test_configFile()
    {
        $install = new USVN_Client_Install('tests/tmp/testrepository', 'http://example.com', 'project-love', 'auth007', $this->httpClient);
        $xml = simplexml_load_file('tests/tmp/testrepository/usvn/config.xml');
        $this->assertEquals('http://example.com', (string)$xml->url);
        $this->assertEquals('project-love', (string)$xml->project);
        $this->assertEquals('auth007', (string)$xml->auth);
    }

	public function test_badServer()
	{
        try {
            $install = new USVN_Client_Install('tests/tmp/fakerepository', 'http://localhost:31284', 'project-love', 'auth007', $this->httpClient);
        }
        catch (USVN_Exception $e) {
            return;
        }
        $this->fail();
	}

	public function test_invalidAuth()
	{
		$this->setServerResponseTo(false);
        try {
			$install = new USVN_Client_Install('tests/tmp/testrepository', 'http://example.com', 'project-love', 'auth007', $this->httpClient);
        }
        catch (USVN_Exception $e) {
            return;
        }
        $this->fail();
	}
}

// Call USVN_Client_InstallTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "USVN_Client_InstallTest::main") {
    USVN_Client_InstallTest::main();
}
?>
