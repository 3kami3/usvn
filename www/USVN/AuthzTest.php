<?php
/**
 * Class to test group's model
 *
 * @author Team USVN <contact@usvn.info>
 * @link http://www.usvn.info
 * @license http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt CeCILL V2
 * @copyright Copyright 2007, Team USVN
 * @since 0.5
 * @package Db
 * @subpackage Table
 *
 * This software has been written at EPITECH <http://www.epitech.net>
 * EPITECH, European Institute of Technology, Paris - FRANCE -
 * This project has been realised as part of
 * end of studies project.
 *
 * $Id$
 */

// Call USVN_Auth_Adapter_DbTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "USVN_AuthzTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'www/USVN/autoload.php';

/**
 * Test class for USVN_Auth_Adapter_Db.
 * Generated by PHPUnit_Util_Skeleton on 2007-03-25 at 09:51:30.
 */
class USVN_AuthzTest extends USVN_Test_Test {

    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("USVN_AuthzTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    protected function setUp() {
		parent::setUp();
		$params = array ('host'     => 'localhost',
                 'username' => 'usvn-test',
                 'password' => 'usvn-test',
                 'dbname'   => 'usvn-test');

		$this->db = Zend_Db::factory('PDO_MYSQL', $params);
		Zend_Db_Table::setDefaultAdapter($this->db);
		USVN_Db_Table::$prefix = "usvn_";
		USVN_Db_Utils::deleteAllTables($this->db);
		USVN_Db_Utils::loadFile($this->db, "www/SQL/SVNDB.sql");
		USVN_Db_Utils::loadFile($this->db, "www/SQL/mysql.sql");
    }

    protected function tearDown() {
//		USVN_Db_Utils::deleteAllTables($this->db);
		parent::tearDown();
    }

	public function giveConfig() {
		$configArray = array('subversion' => array('path' => 'tests/tmp/'));
		$config = new Zend_Config($configArray);
		Zend_Registry::set('config', $config);
	}

    public function testNoGroup()
	{
		$this->giveConfig();

		$table = new USVN_Db_Table_Groups();
		$table->delete(1);

		$file = file_get_contents(Zend_Registry::get('config')->subversion->path . "authz");
		$this->assertEquals("[/]\n* = \n\n[groups]\n", $file);
    }

    public function testEmptyGroup()
	{
		$this->giveConfig();

		$table = new USVN_Db_Table_Groups();
		$table->delete(1);
		$group = $table->fetchNew();
		$group->name = "toto";
		$group->save();

		$file = file_get_contents(Zend_Registry::get('config')->subversion->path . "authz");
		$this->assertEquals("[/]\n* = \n\n[groups]\ntoto = \n", $file);
    }

    public function testOneUsersInOneGroup()
	{
		$this->giveConfig();

		$table = new USVN_Db_Table_Groups();
		$table->delete(1);
		$group = $table->fetchNew();
		/* @var $group USVN_Db_Table_Row_Group */
		$group->name = "toto";
		$group->save();

		$table = new USVN_Db_Table_Users();
		$table->delete(1);
		$user1 = $table->fetchNew();
		$user1->login = "user1";
		$user1->password = "user1user1";
		$user1->save();

		$group->addUser($user1);

		$file = file_get_contents(Zend_Registry::get('config')->subversion->path . "authz");
		$this->assertEquals("[/]\n* = \n\n[groups]\ntoto = user1\n", $file);
    }

    public function testTwoUsersInOneGroup()
	{
		$this->giveConfig();

		$table = new USVN_Db_Table_Groups();
		$table->delete(1);
		$group = $table->fetchNew();
		/* @var $group USVN_Db_Table_Row_Group */
		$group->name = "toto";
		$group->save();

		$table = new USVN_Db_Table_Users();
		$table->delete(1);
		$user1 = $table->fetchNew();
		$user1->login = "user1";
		$user1->password = "user1user1";
		$user1->save();
		$user2 = $table->fetchNew();
		$user2->login = "user2";
		$user2->password = "user2user2";
		$user2->save();

		$group->addUser($user1);
		$group->addUser($user2);

		$file = file_get_contents(Zend_Registry::get('config')->subversion->path . "authz");
		$this->assertEquals("[/]\n* = \n\n[groups]\ntoto = user1, user2\n", $file);
    }

    public function testThreeUsersInOneGroup()
	{
		$this->giveConfig();

		$table = new USVN_Db_Table_Groups();
		$table->delete(1);
		$group = $table->fetchNew();
		/* @var $group USVN_Db_Table_Row_Group */
		$group->name = "toto";
		$group->save();

		$table = new USVN_Db_Table_Users();
		$table->delete(1);
		$user1 = $table->fetchNew();
		$user1->login = "user1";
		$user1->password = "user1user1";
		$user1->save();
		$user2 = $table->fetchNew();
		$user2->login = "user2";
		$user2->password = "user2user2";
		$user2->save();
		$user3 = $table->fetchNew();
		$user3->login = "user3";
		$user3->password = "user3user3";
		$user3->save();

		$group->addUser($user1);
		$group->addUser($user2);
		$group->addUser($user3);

		$file = file_get_contents(Zend_Registry::get('config')->subversion->path . "authz");
		$this->assertEquals("[/]\n* = \n\n[groups]\ntoto = user1, user2, user3\n", $file);
    }

    public function testOneUsersInTwoGroups()
	{
		$this->giveConfig();

		$table = new USVN_Db_Table_Groups();
		$table->delete(1);
		$group1 = $table->fetchNew();
		/* @var $group1 USVN_Db_Table_Row_Group */
		$group1->name = "group1";
		$group1->save();
		$group2 = $table->fetchNew();
		/* @var $group2 USVN_Db_Table_Row_Group */
		$group2->name = "group2";
		$group2->save();

		$table = new USVN_Db_Table_Users();
		$table->delete(1);
		$user1 = $table->fetchNew();
		$user1->login = "user1";
		$user1->password = "user1user1";
		$user1->save();

		$group1->addUser($user1);
		$group2->addUser($user1);

		$file = file_get_contents(Zend_Registry::get('config')->subversion->path . "authz");
		$this->assertEquals("[/]\n* = \n\n[groups]\ngroup1 = user1\ngroup2 = user1\n", $file);
    }

    public function testTwoUsersInTwoGroups()
	{
		$this->giveConfig();

		$table = new USVN_Db_Table_Groups();
		$table->delete(1);
		$group1 = $table->fetchNew();
		/* @var $group1 USVN_Db_Table_Row_Group */
		$group1->name = "group1";
		$group1->save();
		$group2 = $table->fetchNew();
		/* @var $group2 USVN_Db_Table_Row_Group */
		$group2->name = "group2";
		$group2->save();

		$table = new USVN_Db_Table_Users();
		$table->delete(1);
		$user1 = $table->fetchNew();
		$user1->login = "user1";
		$user1->password = "user1user1";
		$user1->save();
		$user2 = $table->fetchNew();
		$user2->login = "user2";
		$user2->password = "user2user2";
		$user2->save();

		$group1->addUser($user1);
		$group2->addUser($user2);

		$file = file_get_contents(Zend_Registry::get('config')->subversion->path . "authz");
		$this->assertEquals("[/]\n* = \n\n[groups]\ngroup1 = user1\ngroup2 = user2\n", $file);
    }

    public function testThreeUsersInTwoGroups()
	{
		$this->giveConfig();

		$table = new USVN_Db_Table_Groups();
		$table->delete(1);
		$group1 = $table->fetchNew();
		/* @var $group1 USVN_Db_Table_Row_Group */
		$group1->name = "group1";
		$group1->save();
		$group2 = $table->fetchNew();
		/* @var $group2 USVN_Db_Table_Row_Group */
		$group2->name = "group2";
		$group2->save();

		$table = new USVN_Db_Table_Users();
		$table->delete(1);
		$user1 = $table->fetchNew();
		$user1->login = "user1";
		$user1->password = "user1user1";
		$user1->save();
		$user2 = $table->fetchNew();
		$user2->login = "user2";
		$user2->password = "user2user2";
		$user2->save();
		$user3 = $table->fetchNew();
		$user3->login = "user3";
		$user3->password = "user3user3";
		$user3->save();

		$group1->addUser($user1);
		$group1->addUser($user2);
		$group1->addUser($user3);
		$group2->addUser($user1);
		$group2->addUser($user2);

		$file = file_get_contents(Zend_Registry::get('config')->subversion->path . "authz");
		$this->assertEquals("[/]\n* = \n\n[groups]\ngroup1 = user1, user2, user3\ngroup2 = user1, user2\n", $file);
    }

}

// Call USVN_Auth_Adapter_DbTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "USVN_AuthzTest::main") {
    USVN_AuthzTest::main();
}
?>
