<?php
// Call USVN_Db_Table_Row_GroupTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "USVN_Db_Table_Row_GroupTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'www/USVN/autoload.php';


/**
 * Test class for USVN_Db_Table_Row_Group.
 * Generated by PHPUnit_Util_Skeleton on 2007-04-18 at 14:39:49.
 */
class USVN_Db_Table_Row_GroupTest extends USVN_Test_DB {
	private $groupTable;
	private $group;
	private $groupid;
	private $users;

	/**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("USVN_Db_Table_Row_GroupTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    public function setUp() {
		parent::setUp();
		$this->groupTable = new USVN_Db_Table_Groups();
		$this->group = $this->groupTable->fetchNew();
		$this->group->groups_name = 'test';
		$this->groupid = $this->group->save();

		$this->users = new USVN_Db_Table_Users();
		$user = $this->users->insert(
			array(
				"users_id" => 2,
				"users_login" => "test",
				"users_password" => USVN_Crypt::crypt("test")
			)
		);
		$this->users->insert(
			array(
				"users_id" => 3,
				"users_login" => "babar",
				"users_password" => USVN_Crypt::crypt("test")
			)
		);
		$this->users->insert(
			array(
				"users_id" => 4,
				"users_login" => "john",
				"users_password" => USVN_Crypt::crypt("test")
			)
		);
    }

	public function testGroup()
	{
		$this->assertEquals('test', $this->group->groups_name);
		$this->assertEquals('test', $this->group->name);
	}

	public function testAddUser()
	{
		$this->group->addUser($this->users->find(2)->current());
		$this->group->addUser($this->users->find(3)->current());
		$this->users = $this->group->findManyToManyRowset('USVN_Db_Table_Users', 'USVN_Db_Table_UsersToGroups');
		$res = array();
		foreach ($this->users as $user) {
			array_push($res, $user->users_login);
		}
		$this->assertContains("test", $res);
		$this->assertContains("babar", $res);
		$this->assertNotContains("john", $res);
	}

	public function testUserIsMember()
	{
		$user = $this->users->find(2)->current();
		$this->assertFalse($this->group->userIsMember($user));
		$this->group->addUser($user);
		$this->assertTrue($this->group->userIsMember($user));
	}

	public function testUserIsGroupLeader()
	{
		$user2 = $this->users->find(2)->current();
		$user3 = $this->users->find(3)->current();
		$user4 = $this->users->find(4)->current();
		$user_groups = new USVN_Db_Table_UsersToGroups();
		$user_groups->insert(
			array(
				"groups_id" => $this->groupid,
				"users_id" => $user3->id,
				"is_leader" => 0
			)
		);
		$user_groups->insert(
			array(
				"groups_id" => $this->groupid,
				"users_id" => $user4->id,
				"is_leader" => 1
			)
		);
		$this->assertFalse($this->group->userIsGroupLeader($user2));
		$this->assertFalse($this->group->userIsGroupLeader($user3));
		$this->assertTrue($this->group->userIsGroupLeader($user4));
	}

	public function testPromoteUser()
	{
		$user = $this->users->find(2)->current();
		$this->group->addUser($user);
		$this->assertFalse($this->group->userIsGroupLeader($user));
		$this->group->promoteUser($user);
		$this->assertTrue($this->group->userIsGroupLeader($user));
	}

	public function testPromoteUserNotGroupMember()
	{
		$user = $this->users->find(2)->current();
		try {
			$this->group->promoteUser($user);
		}
		catch (USVN_Exception $e) {
			return;
		}
		$this->fail();
	}

	public function testDemoteUser()
	{
		$user = $this->users->find(2)->current();
		$this->group->addUser($user);
		$this->group->promoteUser($user);
		$this->assertTrue($this->group->userIsGroupLeader($user));
		$this->group->demoteUser($user);
		$this->assertFalse($this->group->userIsGroupLeader($user));
	}

	public function testDemoteUserNotGroupMember()
	{
		$user = $this->users->find(2)->current();
		try {
			$this->group->demoteUser($user);
		}
		catch (USVN_Exception $e) {
			return;
		}
		$this->fail();
	}

	public function testgetGroupLeaders()
	{
		$user2 = $this->users->find(2)->current();
		$user3 = $this->users->find(3)->current();
		$this->assertEquals(0, count($this->group->getGroupLeaders()));
		$this->group->addUser($user2);
		$this->group->addUser($user3);
		$this->assertEquals(0, count($this->group->getGroupLeaders()));
		$this->group->promoteUser($user2);
		$leaders = $this->group->getGroupLeaders();
		$this->assertEquals(1, count($leaders));
		$this->assertEquals(2, $leaders->current()->users_id);
		$this->assertEquals('test', $leaders->current()->users_login);
		$this->group->promoteUser($user3);
		$this->assertEquals(2, count($this->group->getGroupLeaders()));
	}

	public function testgetGroupNormalUsers()
	{
		$user2 = $this->users->find(2)->current();
		$user3 = $this->users->find(3)->current();
		$this->assertEquals(0, count($this->group->getNormalUsers()));
		$this->group->addUser($user2);
		$this->group->addUser($user3);
		$this->assertEquals(2, count($this->group->getNormalUsers()));
		$this->group->promoteUser($user2);
		$members = $this->group->getNormalUsers();
		$this->assertEquals(1, count($members));
		$this->assertEquals(3, $members->current()->users_id);
		$this->assertEquals('babar', $members->current()->users_login);
		$this->group->promoteUser($user3);
		$this->assertEquals(0, count($this->group->getNormalUsers()));
	}

	public function testHasUser()
	{
		$user2 = $this->users->find(2)->current();
		$this->assertFalse($this->group->hasUser($user2));
		$this->group->addUser($user2);
		$this->assertTrue($this->group->hasUser($user2));
	}

	public function testHasUserNewGroup()
	{
		$groups = new USVN_Db_Table_Groups();
		$group = $groups->createRow();
		$user2 = $this->users->find(2)->current();
		$this->assertFalse($group->hasUser($user2));
	}
}

// Call USVN_Db_Table_Row_GroupTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "USVN_Db_Table_Row_GroupTest::main") {
    USVN_Db_Table_Row_GroupTest::main();
}
?>
