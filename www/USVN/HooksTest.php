<?php
/**
 * Class who handle subversion hooks
 *
 * @author Team USVN <contact@usvn.info>
 * @link http://www.usvn.info
 * @license http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt CeCILL V2
 * @copyright Copyright 2007, Team USVN
 * @since 0.8
 * @package svnhooks
 * @subpackage model
 *
 * This software has been written at EPITECH <http://www.epitech.net>
 * EPITECH, European Institute of Technology, Paris - FRANCE -
 * This project has been realised as part of
 * end of studies project.
 *
 * $Id$
 */
// Call USVN_HooksTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "USVN_HooksTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'www/USVN/autoload.php';

/**
 * Test class for USVN_Hooks.
 * Generated by PHPUnit_Util_Skeleton on 2007-03-10 at 19:20:07.
 */
class USVN_HooksTest extends USVN_Test_DB {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("USVN_HooksTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

	public function setUp()
	{
		parent::setUp();
		$data = array(
			"projects_id" => 2,
			"projects_name" => 'love',
			'projects_start_date' => '1984-12-03 00:00:00'
		);
		$this->db->insert("usvn_projects", $data);
	}

	public function test_startCommit()
    {
		$hook = new USVN_Hooks();
		$this->assertEquals(0, $hook->startCommit("love", "test"));
    }

	public function test_startCommitBadProject()
    {
		$hook = new USVN_Hooks();
		try {
			$hook->startCommit("fake", "test");
		}
		catch (USVN_Exception $e) {
			$this->assertEquals($e->getMessage(), "Project fake doesn't exists.");
			return;
		}
		$this->fail();
    }

    public function test_preCommit()
    {
		$hook = new USVN_Hooks();
		$this->assertEquals(0, $hook->preCommit("love", "test", "Ceci est un commit", array(array('M', 'tata'), array('A', 'tutu'))));
    }

    public function test_postCommit()
    {
		$hook = new USVN_Hooks();
		$hook->postCommit("love", 1, "test", "Ceci est un commit", array(array('M', 'tata'), array('A', 'tutu')));
    }

    public function test_preLock()
    {
		$hook = new USVN_Hooks();
		$this->assertEquals(0, $hook->preLock("love", "tutu", "test"));
    }

    public function test_postLock()
    {
		$hook = new USVN_Hooks();
		$hook->postLock("love", "tutu", "test");
    }

    public function test_preUnlock()
    {
		$hook = new USVN_Hooks();
		$this->assertEquals(0, $hook->preUnlock("love", "tutu", "test"));
    }

    public function test_postUnlock()
    {
		$hook = new USVN_Hooks();
		$hook->postUnlock("love", "tutu", "test");
    }

    public function test_preRevpropChange()
    {
		$hook = new USVN_Hooks();
		$this->assertEquals(0, $hook->preRevpropChange("love", 1, "test", "svn:log", "M", "message de log"));
    }

    public function test_postRevpropChange()
    {
		$hook = new USVN_Hooks();
		$hook->postRevpropChange("love", 1, "test", "svn:log", "M", "message de log");
    }
}

// Call USVN_HooksTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "USVN_HooksTest::main") {
    USVN_HooksTest::main();
}
?>
